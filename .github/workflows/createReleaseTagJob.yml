name: Create Release Tag Job

on:
  workflow_call:
    secrets:
      GIT_KEY:
        description: 'SSH Private Key'
        required: true
      GIT_USER:
        description: 'User identifier'
        required: true
      GIT_EMAIL:
        description: 'User email address'
        required: true
    outputs:
      VERSION:
        description: "Tagged release version"
        value: ${{ jobs.release.outputs.VERSION }}

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.output-version.outputs.version }}
    steps:
      - name: Install dependencies
        run: |
          sudo apt install -y jq
      - uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.GIT_KEY }}
      - name: Read .nvmrc
        run: echo ::set-output name=NVMRC::$(cat .nvmrc)
        id: nvm
      - name: Setup Node@${{ steps.nvm.outputs.NVMRC }}
        uses: actions/setup-node@v3
        with:
          node-version: '${{ steps.nvm.outputs.NVMRC }}'
      - name: Configure git
        run: | 
          git config user.email $GIT_EMAIL
          git config user.name $GIT_USER
        env:
          GIT_EMAIL: ${{ secrets.GIT_EMAIL }}
          GIT_USER: ${{ secrets.GIT_USER }}
      - name: Create the release
        run: |
          npm ci
          npm run release
        # env:
        #   GITHUB_TOKEN: ${{ secrets.OVERRIDE_GITHUB_TOKEN }}
      - name: Fetch changelog
        run: |
          git diff --no-indent-heuristic main~1 HEAD CHANGELOG.md | sed -n '/^+[^+]/ s/^+//p' > /tmp/changes
          echo "RELEASE_CHANGES=$(cat /tmp/changes)" >> $GITHUB_ENV
          echo "RELEASE_TAG=$(cat package-lock.json | jq -r .version)" >> $GITHUB_ENV
      - name: Release info
        run: |
          echo "CHANGES INCLUDED IN THIS TAGGED RELEASE:"
          cat /tmp/changes
          echo "------------------------------"
          echo "RELEASE_CHANGES=$RELEASE_CHANGES"
          echo "RELEASE_TAG=$RELEASE_TAG"
      # - name: Push the release @ v${{ env.RELEASE_TAG }}
      #   run: |
      #     git push --follow-tags
      - name: Push changes for release @ v${{ env.RELEASE_TAG }}
        run: |
          git push
      - name: Push tag for release @ v${{ env.RELEASE_TAG }}
        run: |
          git push origin v${{ env.RELEASE_TAG }}
      - id: output-version
        run: echo "::set-output name=version::${{ env.RELEASE_TAG }}"
      # - name: Create Release @${{ env.RELEASE_TAG }}
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      #   with:
      #     tag_name: ${{ env.RELEASE_TAG }}
      #     release_name: Release v${{ env.RELEASE_TAG }}
      #     body: ${{ env.RELEASE_CHANGES }}
      #     draft: false
      #     prerelease: false
      # - name: Upload Release Asset
      #   id: upload-release-asset 
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
      #     asset_path: ./CHANGELOG.md
      #     asset_name: CHANGELOG.md
      #     asset_content_type: text/markdown
