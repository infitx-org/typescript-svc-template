name: Create Release Tag Job

on:
  workflow_call:
    inputs:
      TYPE:
        description: 'Type of release Notification, e.g. Tag, Github, NPM, Docker, etc'
        type: string
        required: false
        default: 'Tag Release'
      PROJECT:
        description: 'Name of project'
        type: string
        required: false
        default: ${{ github.repository }}
      CONDITION:
        description: 'Github step condition, e.g. success, failure, always'
        type: string
        required: false
        default: failure
      CHANGE_URL:
        description: 'URL for commit or pr'
        type: string
        required: false
        default: ${{ github.event.pull_request.html_url || github.event.head_commit.url }}
      JOB_URL:
        description: 'URL for Job'
        type: string
        required: false
        default: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      CUSTOM_MSG:
        description: 'Optional custom message'
        type: string
        required: false
    secrets:
      GIT_KEY:
        description: 'SSH Private Key'
        required: true
      GIT_USER:
        description: 'User identifier'
        required: true
      GIT_EMAIL:
        description: 'User email address'
        required: true
      SLACK_BOT_TOKEN:
        description: 'Slack Bot Token'
        required: true
      SLACK_CHANEL:
        description: 'Slack channel'
        required: true
    outputs:
      VERSION:
        description: "Tagged release version"
        value: ${{ jobs.release.outputs.VERSION }}

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.output-version.outputs.version }}
    steps:
      - name: Install dependencies
        run: |
          sudo apt install -y jq
      - uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.GIT_KEY }}
      - name: Read .nvmrc
        run: echo ::set-output name=NVMRC::$(cat .nvmrc)
        id: nvm
      - name: Setup Node@${{ steps.nvm.outputs.NVMRC }}
        uses: actions/setup-node@v3
        with:
          node-version: '${{ steps.nvm.outputs.NVMRC }}'
      - name: Configure git
        run: | 
          git config user.email $GIT_EMAIL
          git config user.name $GIT_USER
        env:
          GIT_EMAIL: ${{ secrets.GIT_EMAIL }}
          GIT_USER: ${{ secrets.GIT_USER }}
      - name: Create the release
        run: |
          npm ci
          npm run release
      - name: Fetch changelog
        run: |
          git diff --no-indent-heuristic main~1 HEAD CHANGELOG.md | sed -n '/^+[^+]/ s/^+//p' > /tmp/changes
          echo "RELEASE_CHANGES=$(cat /tmp/changes)" >> $GITHUB_ENV
          echo "RELEASE_TAG=$(cat package-lock.json | jq -r .version)" >> $GITHUB_ENV
      - name: Release info
        run: |
          echo "CHANGES INCLUDED IN THIS TAGGED RELEASE:"
          cat /tmp/changes
          echo "------------------------------"
          echo "RELEASE_CHANGES=$RELEASE_CHANGES"
          echo "RELEASE_TAG=$RELEASE_TAG"
      - name: Push the release @ v${{ env.RELEASE_TAG }}
        run: |
          git push --follow-tags
      # - name: Push changes for release @ v${{ env.RELEASE_TAG }}
      #   run: |
      #     git push
      # - name: Push tag for release @ v${{ env.RELEASE_TAG }}
      #   run: |
      #     git push origin v${{ env.RELEASE_TAG }}
      - id: output-version
        run: echo "::set-output name=version::${{ env.RELEASE_TAG }}"
      # - name: Create Release @${{ env.RELEASE_TAG }}
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      #   with:
      #     tag_name: ${{ env.RELEASE_TAG }}
      #     release_name: Release v${{ env.RELEASE_TAG }}
      #     body: ${{ env.RELEASE_CHANGES }}
      #     draft: false
      #     prerelease: false
      # - name: Upload Release Asset
      #   id: upload-release-asset 
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
      #     asset_path: ./CHANGELOG.md
      #     asset_name: CHANGELOG.md
      #     asset_content_type: text/markdown
      - name: Post to a Slack channel
        if: ${{ github.action_status == inputs.CONDITION || inputs.CONDITION == 'always' }}
        id: slack
        uses: slackapi/slack-github-action@v1.19.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          RELEASE_URL: ${{ github.server_url }}/${{ github.repository }}/releases/tag/v${{ env.RELEASE_TAG }}
        with:
          # Slack channel id, channel name, or user id to post message.
          # See also: https://api.slack.com/methods/chat.postMessage#channels
          channel-id: ${{ secrets.SLACK_CHANEL }}
          # For posting a rich message using Block Kit
          payload: |
            {
              "attachments": [
                {
                  "color": "#5abc54",
                  "blocks": [
                      {
                          "type": "header",
                          "text": {
                              "type": "plain_text",
                              "text": "${{ inputs.PROJECT }}",
                              "emoji": true
                          }
                      },
                      {
                          "type": "divider"
                      },
                      {
                          "type": "section",
                          "text": {
                              "type": "mrkdwn",
                              "text": "Type: `${{ inputs.TYPE }}`\nTag: `${{ env.RELEASE_TAG }}`"
                          }
                      },
                      {
                          "type": "section",
                          "text": {
                              "type": "mrkdwn",
                              "text": ":shipit: ${{ env.RELEASE_URL }}"
                          }
                      },
                      {
                          "type": "section",
                          "text": {
                              "type": "mrkdwn",
                              "text": "Status: *${{ job.status }}* @ ${{ inputs.CHANGE_URL }}"
                          },
                          "accessory": {
                              "type": "button",
                              "text": {
                                  "type": "plain_text",
                                  "text": "View",
                                  "emoji": true
                              },
                              "value": "visit_job_btn",
                              "url": "${{ inputs.JOB_URL }}",
                              "action_id": "button-action"
                          }
                      },
                      {
                          "type": "divider"
                      },
                      {
                          "type": "section",
                          "text": {
                              "type": "mrkdwn",
                              "text": "${{ inputs.CUSTOM_MSG }} "
                          }
                      }
                  ]
                }
              ]
            }
