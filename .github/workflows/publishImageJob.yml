# Prerequisites for this action:
# - need to enable "improved container support":
#   https://docs.github.com/en/packages/guides/enabling-improved-container-support
# - need to add an access token to secrets (in this case called CR_PAT), probably good to do this
#   at organisation level. This access token needs to be a personal access token at the time of
#   writing. This works, because the organisation policy gives organisation members permission to
#   publish packages.
#   Note this outstanding issue:
#   https://github.community/t/cannot-create-pat-with-scope-write-packages-without-repo-scope/154300
# - looks like you'll need to manually make the published image public by visiting:
#   https://github.com/orgs/{{ your organisation }}/packages

# TODO: create a tag/release with the version based on the version in package.json every time a
# merge is made to master? Prevent any merges to master without a code change? (That's probably
# tricky- what to do about documentation changes etc.? Perhaps build the container image, see if
# the checksum is the same as the existing one, and prevent pushes to master that change the
# container checksum without changing the package.json version?).

# TODO:
# - delete created images from the repository when a release is deleted/unpublished?

name: Publish image

# on:
#   # The build will run on all of the following event types, however an image will _only_ be
#   # published for a release.
#   release:
#     types: [published]

on:
  workflow_call:
    inputs:
      RELEASE_VERSION:
        description: 'Release information, e.g. v{{version}}'
        type: string
        required: true
    secrets:
      GH_TOKEN:
        description: 'Github API Token'
        required: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# jobs:
#   build-and-push-image:
#     runs-on: ubuntu-latest
#     permissions:
#       contents: read
#       packages: write

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3
#         with:
#           ref: ${{ inputs.RELEASE_VERSION }}
#       - name: Log in to the Container registry
#         uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
#         with:
#           registry: ${{ env.REGISTRY }}
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}

#       - name: Extract metadata (tags, labels) for Docker
#         id: meta
#         uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
#         with:
#           images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

#       - name: Build and push Docker image
#         uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
#         with:
#           context: .
#           push: true
#           tags: ${{ steps.meta.outputs.tags }}
#           labels: ${{ steps.meta.outputs.labels }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        # At the time of writing, we need to manually specify the context, as we can't set a
        # subdirectory of the repo as a build context
        # https://github.com/docker/build-push-action/tree/636b4540ec057719fe868a4435761056c89d2fff#git-context
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.RELEASE_VERSION }}
      - name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          # Except for Dockerhub, which is the default, tags need to have the registry name in
          # them, e.g. ghcr.io for Github container registry, or gcr.io for Google container
          # registry.
          # Note that the generated tags will look like:
          #   ghcr.io/{owner}/{repo}:version
          images: ghcr.io/${{ github.repository }}
          # For a release v1.2.3, we'll produce the following image tags
          #   v1.2.3
          #   1.2.3
          #   1.2
          #   latest
          # Semver pre-release versions are also supported
          # See also:
          # https://github.com/crazy-max/ghaction-docker-meta/tree/0a412843f87333854fa03a809b74056b64c6f31a#handle-semver-tag
          tag-semver: |
            {{raw}}
            {{version}}
            {{major}}.{{minor}}
          label-custom: |
            org.opencontainers.image.vendor=ModusBox Inc.
            org.opencontainers.image.licenses=Apache-2.0
            org.opencontainers.image.version= ${{ inputs.RELEASE_VERSION }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}/tree/${{ github.sha }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2.2.1
        with:
          push: ${{ github.event_name == 'release' }}
          # The following two lines are required in concert with the checkout action above, because
          # the Dockerfile is in a subdirectory in the repo.
          context: ./server
          file: ./server/Dockerfile
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
