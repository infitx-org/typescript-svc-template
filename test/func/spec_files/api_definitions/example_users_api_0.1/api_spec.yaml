components:
  examples: {}
  headers: {}
  parameters: {}
  requestBodies: {}
  responses: {}
  schemas:
    Health:
      properties:
        status:
          type: string
          enum:
            - OK
            - ERROR
        mockServerResponse: {}
        errors:
          items:
            type: string
          type: array
      required:
        - status
      type: object
      additionalProperties: false
    User:
      properties:
        id:
          type: number
          format: double
        email:
          type: string
        name:
          type: string
        status:
          type: string
          enum:
            - Happy
            - Sad
        phoneNumbers:
          items:
            type: string
          type: array
      required:
        - id
        - email
        - name
        - phoneNumbers
      type: object
      additionalProperties: false
    Pick_User.email-or-name-or-phoneNumbers_:
      properties:
        email:
          type: string
        name:
          type: string
        phoneNumbers:
          items:
            type: string
          type: array
      required:
        - email
        - name
        - phoneNumbers
      type: object
      description: From T, pick a set of properties whose keys are in the union K
    UserCreationParams:
      $ref: '#/components/schemas/Pick_User.email-or-name-or-phoneNumbers_'
  securitySchemes: {}
info:
  title: '@modusbox/typescript-svc-template'
  version: 0.0.152
  description: Template for typescript nodejs projects
  license:
    name: Apache-2.0
  contact:
    name: ModusBox
openapi: 3.0.0
paths:
  /health:
    get:
      operationId: GetHealth
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Health'
      security: []
      parameters: []
  /users/{userId}:
    get:
      operationId: GetUser
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/User'
                nullable: true
      security: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            format: double
            type: number
  /users:
    get:
      operationId: GetUsers
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
      security: []
      parameters:
        - in: query
          name: name
          required: false
          schema:
            type: string
    post:
      operationId: CreateUser
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security: []
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreationParams'
servers:
  - url: /
